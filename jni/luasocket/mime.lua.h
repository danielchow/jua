{
static const char* F =
"-----------------------------------------------------------------------------\n"
"-- MIME support for the Lua language.                                        \n"
"-- Author: Diego Nehab                                                       \n"
"-- Conforming to RFCs 2045-2049                                              \n"
"-----------------------------------------------------------------------------\n"
"                                                                             \n"
"-----------------------------------------------------------------------------\n"
"-- Declare module and import dependencies                                    \n"
"-----------------------------------------------------------------------------\n"
"local base = _G                                                              \n"
"local ltn12 = require('ltn12')                                               \n"
"local mime = require('mime.core')                                            \n"
"local io = require('io')                                                     \n"
"local string = require('string')                                             \n"
"local _M = mime                                                              \n"
"                                                                             \n"
"-- encode, decode and wrap algorithm tables                                  \n"
"local encodet, decodet, wrapt = {},{},{}                                     \n"
"                                                                             \n"
"_M.encodet = encodet                                                         \n"
"_M.decodet = decodet                                                         \n"
"_M.wrapt   = wrapt                                                           \n"
"                                                                             \n"
"-- creates a function that chooses a filter by name from a given table       \n"
"local function choose(table)                                                 \n"
"    return function(name, opt1, opt2)                                        \n"
"        if base.type(name) ~= 'string' then                                  \n"
"            name, opt1, opt2 = 'default', name, opt1                         \n"
"        end                                                                  \n"
"        local f = table[name or 'nil']                                       \n"
"        if not f then                                                        \n"
"            base.error('unknown key (' .. base.tostring(name) .. ')', 3)     \n"
"        else return f(opt1, opt2) end                                        \n"
"    end                                                                      \n"
"end                                                                          \n"
"                                                                             \n"
"-- define the encoding filters                                               \n"
"encodet['base64'] = function()                                               \n"
"    return ltn12.filter.cycle(_M.b64, '')                                    \n"
"end                                                                          \n"
"                                                                             \n"
"encodet['quoted-printable'] = function(mode)                                 \n"
"    return ltn12.filter.cycle(_M.qp, '',                                     \n"
"        (mode == 'binary') and '=0D=0A' or '\r\n')                           \n"
"end                                                                          \n"
"                                                                             \n"
"-- define the decoding filters                                               \n"
"decodet['base64'] = function()                                               \n"
"    return ltn12.filter.cycle(_M.unb64, '')                                  \n"
"end                                                                          \n"
"                                                                             \n"
"decodet['quoted-printable'] = function()                                     \n"
"    return ltn12.filter.cycle(_M.unqp, '')                                   \n"
"end                                                                          \n"
"                                                                             \n"
"local function format(chunk)                                                 \n"
"    if chunk then                                                            \n"
"        if chunk == '' then return ''''                                      \n"
"        else return string.len(chunk) end                                    \n"
"    else return 'nil' end                                                    \n"
"end                                                                          \n"
"                                                                             \n"
"-- define the line-wrap filters                                              \n"
"wrapt['text'] = function(length)                                             \n"
"    length = length or 76                                                    \n"
"    return ltn12.filter.cycle(_M.wrp, length, length)                        \n"
"end                                                                          \n"
"wrapt['base64'] = wrapt['text']                                              \n"
"wrapt['default'] = wrapt['text']                                             \n"
"                                                                             \n"
"wrapt['quoted-printable'] = function()                                       \n"
"    return ltn12.filter.cycle(_M.qpwrp, 76, 76)                              \n"
"end                                                                          \n"
"                                                                             \n"
"-- function that choose the encoding, decoding or wrap algorithm             \n"
"_M.encode = choose(encodet)                                                  \n"
"_M.decode = choose(decodet)                                                  \n"
"_M.wrap = choose(wrapt)                                                      \n"
"                                                                             \n"
"-- define the end-of-line normalization filter                               \n"
"function _M.normalize(marker)                                                \n"
"    return ltn12.filter.cycle(_M.eol, 0, marker)                             \n"
"end                                                                          \n"
"                                                                             \n"
"-- high level stuffing filter                                                \n"
"function _M.stuff()                                                          \n"
"    return ltn12.filter.cycle(_M.dot, 2)                                     \n"
"end                                                                          \n"
"                                                                             \n"
"return _M";
luaL_loadstring(L, F);
lua_call(L, 0, 1);
}
