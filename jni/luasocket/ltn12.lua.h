{
static const char* F =
"-----------------------------------------------------------------------------  \n"
"-- LTN12 - Filters, sources, sinks and pumps.                                  \n"
"-- LuaSocket toolkit.                                                          \n"
"-- Author: Diego Nehab                                                         \n"
"-----------------------------------------------------------------------------  \n"
"                                                                               \n"
"-----------------------------------------------------------------------------  \n"
"-- Declare module                                                              \n"
"-----------------------------------------------------------------------------  \n"
"local string = require('string')                                               \n"
"local table = require('table')                                                 \n"
"local base = _G                                                                \n"
"local _M = {}                                                                  \n"
"if module then -- heuristic for exporting a global package table               \n"
"    ltn12 = _M                                                                 \n"
"end                                                                            \n"
"local filter,source,sink,pump = {},{},{},{}                                    \n"
"                                                                               \n"
"_M.filter = filter                                                             \n"
"_M.source = source                                                             \n"
"_M.sink = sink                                                                 \n"
"_M.pump = pump                                                                 \n"
"                                                                               \n"
"-- 2048 seems to be better in windows...                                       \n"
"_M.BLOCKSIZE = 2048                                                            \n"
"_M._VERSION = 'LTN12 1.0.3'                                                    \n"
"                                                                               \n"
"-----------------------------------------------------------------------------  \n"
"-- Filter stuff                                                                \n"
"-----------------------------------------------------------------------------  \n"
"-- returns a high level filter that cycles a low-level filter                  \n"
"function filter.cycle(low, ctx, extra)                                         \n"
"    base.assert(low)                                                           \n"
"    return function(chunk)                                                     \n"
"        local ret                                                              \n"
"        ret, ctx = low(ctx, chunk, extra)                                      \n"
"        return ret                                                             \n"
"    end                                                                        \n"
"end                                                                            \n"
"                                                                               \n"
"-- chains a bunch of filters together                                          \n"
"-- (thanks to Wim Couwenberg)                                                  \n"
"function filter.chain(...)                                                     \n"
"    local arg = {...}                                                          \n"
"    local n = select('#',...)                                                  \n"
"    local top, index = 1, 1                                                    \n"
"    local retry = ''                                                           \n"
"    return function(chunk)                                                     \n"
"        retry = chunk and retry                                                \n"
"        while true do                                                          \n"
"            if index == top then                                               \n"
"                chunk = arg[index](chunk)                                      \n"
"                if chunk == '' or top == n then return chunk                   \n"
"                elseif chunk then index = index + 1                            \n"
"                else                                                           \n"
"                    top = top+1                                                \n"
"                    index = top                                                \n"
"                end                                                            \n"
"            else                                                               \n"
"                chunk = arg[index](chunk or '')                                \n"
"                if chunk == '' then                                            \n"
"                    index = index - 1                                          \n"
"                    chunk = retry                                              \n"
"                elseif chunk then                                              \n"
"                    if index == n then return chunk                            \n"
"                    else index = index + 1 end                                 \n"
"                else base.error('filter returned inappropriate nil') end       \n"
"            end                                                                \n"
"        end                                                                    \n"
"    end                                                                        \n"
"end                                                                            \n"
"                                                                               \n"
"-----------------------------------------------------------------------------  \n"
"-- Source stuff                                                                \n"
"-----------------------------------------------------------------------------  \n"
"-- create an empty source                                                      \n"
"local function empty()                                                         \n"
"    return nil                                                                 \n"
"end                                                                            \n"
"                                                                               \n"
"function source.empty()                                                        \n"
"    return empty                                                               \n"
"end                                                                            \n"
"                                                                               \n"
"-- returns a source that just outputs an error                                 \n"
"function source.error(err)                                                     \n"
"    return function()                                                          \n"
"        return nil, err                                                        \n"
"    end                                                                        \n"
"end                                                                            \n"
"                                                                               \n"
"-- creates a file source                                                       \n"
"function source.file(handle, io_err)                                           \n"
"    if handle then                                                             \n"
"        return function()                                                      \n"
"            local chunk = handle:read(_M.BLOCKSIZE)                            \n"
"            if not chunk then handle:close() end                               \n"
"            return chunk                                                       \n"
"        end                                                                    \n"
"    else return source.error(io_err or 'unable to open file') end              \n"
"end                                                                            \n"
"                                                                               \n"
"-- turns a fancy source into a simple source                                   \n"
"function source.simplify(src)                                                  \n"
"    base.assert(src)                                                           \n"
"    return function()                                                          \n"
"        local chunk, err_or_new = src()                                        \n"
"        src = err_or_new or src                                                \n"
"        if not chunk then return nil, err_or_new                               \n"
"        else return chunk end                                                  \n"
"    end                                                                        \n"
"end                                                                            \n"
"                                                                               \n"
"-- creates string source                                                       \n"
"function source.string(s)                                                      \n"
"    if s then                                                                  \n"
"        local i = 1                                                            \n"
"        return function()                                                      \n"
"            local chunk = string.sub(s, i, i+_M.BLOCKSIZE-1)                   \n"
"            i = i + _M.BLOCKSIZE                                               \n"
"            if chunk ~= '' then return chunk                                   \n"
"            else return nil end                                                \n"
"        end                                                                    \n"
"    else return source.empty() end                                             \n"
"end                                                                            \n"
"                                                                               \n"
"-- creates rewindable source                                                   \n"
"function source.rewind(src)                                                    \n"
"    base.assert(src)                                                           \n"
"    local t = {}                                                               \n"
"    return function(chunk)                                                     \n"
"        if not chunk then                                                      \n"
"            chunk = table.remove(t)                                            \n"
"            if not chunk then return src()                                     \n"
"            else return chunk end                                              \n"
"        else                                                                   \n"
"            table.insert(t, chunk)                                             \n"
"        end                                                                    \n"
"    end                                                                        \n"
"end                                                                            \n"
"                                                                               \n"
"-- chains a source with one or several filter(s)                               \n"
"function source.chain(src, f, ...)                                             \n"
"    if ... then f=filter.chain(f, ...) end                                     \n"
"    base.assert(src and f)                                                     \n"
"    local last_in, last_out = '', ''                                           \n"
"    local state = 'feeding'                                                    \n"
"    local err                                                                  \n"
"    return function()                                                          \n"
"        if not last_out then                                                   \n"
"            base.error('source is empty!', 2)                                  \n"
"        end                                                                    \n"
"        while true do                                                          \n"
"            if state == 'feeding' then                                         \n"
"                last_in, err = src()                                           \n"
"                if err then return nil, err end                                \n"
"                last_out = f(last_in)                                          \n"
"                if not last_out then                                           \n"
"                    if last_in then                                            \n"
"                        base.error('filter returned inappropriate nil')        \n"
"                    else                                                       \n"
"                        return nil                                             \n"
"                    end                                                        \n"
"                elseif last_out ~= '' then                                     \n"
"                    state = 'eating'                                           \n"
"                    if last_in then last_in = '' end                           \n"
"                    return last_out                                            \n"
"                end                                                            \n"
"            else                                                               \n"
"                last_out = f(last_in)                                          \n"
"                if last_out == '' then                                         \n"
"                    if last_in == '' then                                      \n"
"                        state = 'feeding'                                      \n"
"                    else                                                       \n"
"                        base.error('filter returned ''')                       \n"
"                    end                                                        \n"
"                elseif not last_out then                                       \n"
"                    if last_in then                                            \n"
"                        base.error('filter returned inappropriate nil')        \n"
"                    else                                                       \n"
"                        return nil                                             \n"
"                    end                                                        \n"
"                else                                                           \n"
"                    return last_out                                            \n"
"                end                                                            \n"
"            end                                                                \n"
"        end                                                                    \n"
"    end                                                                        \n"
"end                                                                            \n"
"                                                                               \n"
"-- creates a source that produces contents of several sources, one after the   \n"
"-- other, as if they were concatenated                                         \n"
"-- (thanks to Wim Couwenberg)                                                  \n"
"function source.cat(...)                                                       \n"
"    local arg = {...}                                                          \n"
"    local src = table.remove(arg, 1)                                           \n"
"    return function()                                                          \n"
"        while src do                                                           \n"
"            local chunk, err = src()                                           \n"
"            if chunk then return chunk end                                     \n"
"            if err then return nil, err end                                    \n"
"            src = table.remove(arg, 1)                                         \n"
"        end                                                                    \n"
"    end                                                                        \n"
"end                                                                            \n"
"                                                                               \n"
"-----------------------------------------------------------------------------  \n"
"-- Sink stuff                                                                  \n"
"-----------------------------------------------------------------------------  \n"
"-- creates a sink that stores into a table                                     \n"
"function sink.table(t)                                                         \n"
"    t = t or {}                                                                \n"
"    local f = function(chunk, err)                                             \n"
"        if chunk then table.insert(t, chunk) end                               \n"
"        return 1                                                               \n"
"    end                                                                        \n"
"    return f, t                                                                \n"
"end                                                                            \n"
"                                                                               \n"
"-- turns a fancy sink into a simple sink                                       \n"
"function sink.simplify(snk)                                                    \n"
"    base.assert(snk)                                                           \n"
"    return function(chunk, err)                                                \n"
"        local ret, err_or_new = snk(chunk, err)                                \n"
"        if not ret then return nil, err_or_new end                             \n"
"        snk = err_or_new or snk                                                \n"
"        return 1                                                               \n"
"    end                                                                        \n"
"end                                                                            \n"
"                                                                               \n"
"-- creates a file sink                                                         \n"
"function sink.file(handle, io_err)                                             \n"
"    if handle then                                                             \n"
"        return function(chunk, err)                                            \n"
"            if not chunk then                                                  \n"
"                handle:close()                                                 \n"
"                return 1                                                       \n"
"            else return handle:write(chunk) end                                \n"
"        end                                                                    \n"
"    else return sink.error(io_err or 'unable to open file') end                \n"
"end                                                                            \n"
"                                                                               \n"
"-- creates a sink that discards data                                           \n"
"local function null()                                                          \n"
"    return 1                                                                   \n"
"end                                                                            \n"
"                                                                               \n"
"function sink.null()                                                           \n"
"    return null                                                                \n"
"end                                                                            \n"
"                                                                               \n"
"-- creates a sink that just returns an error                                   \n"
"function sink.error(err)                                                       \n"
"    return function()                                                          \n"
"        return nil, err                                                        \n"
"    end                                                                        \n"
"end                                                                            \n"
"                                                                               \n"
"-- chains a sink with one or several filter(s)                                 \n"
"function sink.chain(f, snk, ...)                                               \n"
"    if ... then                                                                \n"
"        local args = { f, snk, ... }                                           \n"
"        snk = table.remove(args, #args)                                        \n"
"        f = filter.chain(unpack(args))                                         \n"
"    end                                                                        \n"
"    base.assert(f and snk)                                                     \n"
"    return function(chunk, err)                                                \n"
"        if chunk ~= '' then                                                    \n"
"            local filtered = f(chunk)                                          \n"
"            local done = chunk and ''                                          \n"
"            while true do                                                      \n"
"                local ret, snkerr = snk(filtered, err)                         \n"
"                if not ret then return nil, snkerr end                         \n"
"                if filtered == done then return 1 end                          \n"
"                filtered = f(done)                                             \n"
"            end                                                                \n"
"        else return 1 end                                                      \n"
"    end                                                                        \n"
"end                                                                            \n"
"                                                                               \n"
"-----------------------------------------------------------------------------  \n"
"-- Pump stuff                                                                  \n"
"-----------------------------------------------------------------------------  \n"
"-- pumps one chunk from the source to the sink                                 \n"
"function pump.step(src, snk)                                                   \n"
"    local chunk, src_err = src()                                               \n"
"    local ret, snk_err = snk(chunk, src_err)                                   \n"
"    if chunk and ret then return 1                                             \n"
"    else return nil, src_err or snk_err end                                    \n"
"end                                                                            \n"
"                                                                               \n"
"-- pumps all data from a source to a sink, using a step function               \n"
"function pump.all(src, snk, step)                                              \n"
"    base.assert(src and snk)                                                   \n"
"    step = step or pump.step                                                   \n"
"    while true do                                                              \n"
"        local ret, err = step(src, snk)                                        \n"
"        if not ret then                                                        \n"
"            if err then return nil, err                                        \n"
"            else return 1 end                                                  \n"
"        end                                                                    \n"
"    end                                                                        \n"
"end                                                                            \n"
"                                                                               \n"
"return _M";
if (luaL_loadstring(L, F)==0) lua_call(L, 0, 0);
}